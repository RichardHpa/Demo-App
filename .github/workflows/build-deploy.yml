name: ðŸš€ Build & deploy

on:
  push:
    branches:
      - main
    paths:
      # only release when files in these paths are changed
      - 'package.json'

jobs:
  check:
    name: Check Files
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: 'Setup Node, Caching, and Yarn install'
        uses: ./.github/actions/node-yarn

      - name: Run Lint
        run: yarn lint:ci

      - name: Run Jest
        run: yarn test:ci

  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      isNewerVersion: ${{ steps.compare.outputs.isNewerVersion }}
      versionType: ${{ steps.compare.outputs.versionType }}
      tag: ${{ steps.setTags.outputs.tag }}
    needs: check
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Setup Node, Caching, and Yarn install'
        uses: ./.github/actions/node-yarn

      - name: 'Get current Package Version'
        id: PACKAGE_VERSION
        uses: martinbeentjes/npm-get-version-action@v1.2.3

      - name: Set PACKAGE_VERSION and tag
        id: setTags
        run: |
          echo "PACKAGE_VERSION=${{ steps.PACKAGE_VERSION.outputs.current-version }}" >> $GITHUB_ENV
          echo "::set-output name=tag::v${{ steps.PACKAGE_VERSION.outputs.current-version }}"

      - name: Compare the two versions
        uses: ./.github/actions/compare-versions
        id: compare
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          currentVersion: ${{ env.PACKAGE_VERSION }}

  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.isNewerVersion == 'true'
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Setup Node, Caching, and Yarn install'
        uses: ./.github/actions/node-yarn

      # Create a Github Tag so we can point the release to this.
      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ needs.prepare.outputs.tag }}',
              sha: context.sha
            })

      - name: Build a release and pack a package.tgz
        run: yarn build:ci # creates a `package.tgz` file

      - name: Store package.tgz as a CI Artifact
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: package.tgz

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v2
        with:
          name: production-files
          path: ./build

      - name: Create a Release
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          release_name: ${{ needs.prepare.outputs.tag }}
          draft: false
          prerelease: false
          body: |
            Automated via `./github/workflows/build-deploy.yml`

            - Author: **@${{ github.actor }}**
            - Version: `${{ env.PACKAGE_VERSION }}`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release package.tgz
        if: steps.create_release.outputs.upload_url
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package.tgz
          asset_name: package.tgz
          asset_content_type: application/tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: production-files
          path: ./build

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
      
      - name: Slack Success Notification
        uses: ./.github/actions/slack
        with:
          slack_webhook: ${{ secrets.SLACK_WEBHOOK }}
          workflow_name: 'Build and Deploy'
          slack_icon_emoji: ':rocket:'
