name: ðŸš€ Build & deploy

on:
  push:
    branches:
      - main
    # paths:
    #   # only release when files in these paths are changed
    #   - 'package.json'

jobs:
  check:
    name: Check Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: 'Setup Node, Caching, and Yarn install'
        uses: ./.github/actions/node-yarn

      # - name: Build project
      #   run: yarn build

      - name: Run Lint
        run: yarn lint:ci

      - name: Run Jest
        run: yarn test:ci

      # - name: Upload production-ready build files
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: production-files
      #     path: ./build

  build:
    name: Prepare for deployment
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Get Package Version we're releasing"
        id: PACKAGE_VERSION
        uses: martinbeentjes/npm-get-version-action@v1.2.3
      # eg. PACKAGE_VERSION=1.2.3 and GIT_TAG=v1.2.3
      - name: Set PACKAGE_VERSION and GIT_TAG
        run: |
          echo "PACKAGE_VERSION=${{ steps.PACKAGE_VERSION.outputs.current-version }}" >> $GITHUB_ENV
          echo "GIT_TAG=v${{ steps.PACKAGE_VERSION.outputs.current-version }}" >> $GITHUB_ENV

      # Create a Github Tag so we can point the release to this.
      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ env.GIT_TAG }}',
              sha: context.sha
            })

      - name: Build a release and pack a package.tgz
        run: yarn build:ci # creates a `package.tgz` file

      - name: Store package.tgz as a CI Artifact
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: package.tgz

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v2
        with:
          name: production-files
          path: ./build

      # TODO: This action is unmaintained!  We should switch and maybe use auto-generated release notes insteadâ€¦
      - name: Create a Release
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: ${{ env.GIT_TAG }}
          release_name: ${{ env.GIT_TAG }}
          draft: false
          prerelease: false
          body: |
            Automated via `./github/workflows/build-deploy.yml`

            - Author: **@${{ github.actor }}**
            - Version: `${{ env.PACKAGE_VERSION }}`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release package.tgz
        if: steps.create_release.outputs.upload_url
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package.tgz
          asset_name: package.tgz
          asset_content_type: application/tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # deploy:
  #   name: Deploy
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Download artifact
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: production-files
  #         path: ./build

  #     - name: Deploy to gh-pages
  #       uses: peaceiris/actions-gh-pages@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: ./build
